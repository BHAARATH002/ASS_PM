import json
import boto3
import base64
import time
import requests
# import paho.mqtt.client as mqtt
from datetime import datetime

# MQTT configuration
MQTT_BROKER = "a2snp5xlwnixk9-ats.iot.us-east-1.amazonaws.com"
MQTT_TOPIC = "sdk/test/python1"
AWS_REGION = "us-east-1"

# AWS IoT client setup (use IAM role permissions)
# client = mqtt.Client()

# Connect to AWS IoT broker
# client.connect(MQTT_BROKER, 8883)  # Use 8883 for SSL/TLS connection
# client.loop_start()

dynamodb = boto3.resource("dynamodb")
s3 = boto3.client("s3")
sns = boto3.client("sns")

TABLE_NAME = "intruderLogs"
BUCKET_NAME = "intruder-images-bucket"
SNS_TOPIC_ARN = "arn:aws:sns:us-east-1:746441023300:intruder-alerts"
APP_API = "http://web-elb-1385983805.us-east-1.elb.amazonaws.com:8080/api/alerts"

def convert_epoch_to_datetime(epoch_timestamp):
    """Converts an epoch timestamp to 'YYYY-MM-DD HH:MM:SS' format."""
    return datetime.utcfromtimestamp(epoch_timestamp).strftime('%Y-%m-%d %H:%M:%S')

def lambda_handler(event, context):
    print(f"{event}")
    device_id = event.get("device_id")
    timestamp = event.get("timestamp")
    image_data = base64.b64decode(event.get("image_data"))
    image_type = event.get("image_type")
    image_file_size = len(image_data)
    video_key = event.get("video_data")
    video_type = event.get("video_type")
    video_file_size = event.get("video_file_size")
    # device_id = 1
    # timestamp = int(time.time())
    # image_data = base64.b64decode("")
    # image_type = "jpg"
    # image_file_size = len(image_data)
    # video_type = "mp4"
    # video_key = f"video/{device_id}/{timestamp}.{video_type}"
    # video_file_size = 1000
    
    # Validate required fields
    if not device_id or not timestamp or not image_data:
        return {"error": "Missing required fields in event"}
    print("Event information received")
    
    # Store data to S3
    image_key = f"image/{device_id}/{timestamp}.{image_type}"
    # s3.put_object(Bucket=BUCKET_NAME, Key=image_key, Body=image_data)
    # video_key = f"video/{device_id}/{timestamp}.{video_type}"
    # s3.put_object(Bucket=BUCKET_NAME, Key=video_key, Body=video_data)
    print(f"Image stored at: {image_key}")

    # Store log info to DynamoDB
    # table = dynamodb.Table(TABLE_NAME)
    # table.put_item(Item={
    #     "device_id": str(device_id),
    #     "timestamp": timestamp,
    #     "image_path": f"{image_key}",
    #     "video_path": f"{video_key}"
    # })
    print(f"Log stored in DynamoDB: {device_id}, {timestamp}")
    
    # Send info to APP via API
    formatted_time = convert_epoch_to_datetime(timestamp)
    # Define the JSON payload
    payload = {
        "deviceData": [
            {
                "deviceId": device_id,
                "dataType": image_type,
                "mediaUrl": image_key,
                "fileSize": image_file_size,
                "timestamp": formatted_time
            },
            {
                "deviceId": device_id,
                "dataType": video_type,
                "mediaUrl": video_key,
                "fileSize": video_file_size,
                "timestamp": formatted_time
            }
        ],
        "deviceId": device_id,
        "alertType": "intrusion",
        "alertMessage": "intruder found.",
        "alertTitle": "Critical intruder Alert",
        "severityLevel": "high",
        "alertDatetime": formatted_time
    }
    print(f"Payload: {payload}")
    # Set headers
    headers = {
        "Content-Type": "application/json"
    }
    # Send the POST request
    # response = requests.post(APP_API, headers=headers, data=json.dumps(payload))
    # print(f"API response: {response.status_code}, {response.text}")

    # Send notification to user via SNS topic
    message = f"ðŸš¨ Intruder detected!\nDevice: {device_id}\nTime: {timestamp}\nImage: {image_key}\nVideo: {video_key}"
    # sns.publish(TopicArn=SNS_TOPIC_ARN, Message=message, Subject="ðŸš¨ Intruder Alert!")
    print(f"Notification sent to SNS topic: {message}")

    iot_client = boto3.client('iot-data')
    response = iot_client.publish(
        topic=MQTT_TOPIC,  # Replace with your response topic
        payload=json.dumps({'message': f'Received and processed device: {device_id}!', "status": "200",}),  # Replace with your response payload
        qos=1  # Quality of Service (0, 1, or 2)
    )
    print(f"Response published to MQTT topic using boto3: {MQTT_TOPIC}")
    return {
        'statusCode': 200,
        'body': json.dumps(f'Message processed and response published for {device_id}!')
    }
